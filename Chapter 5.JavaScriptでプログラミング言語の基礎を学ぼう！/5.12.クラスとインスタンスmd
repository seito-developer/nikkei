# クラスとインスタンス
さて、JSの章の最後はクラスとインスタンスについて解説します。
クラスとインスタンスは、オブジェクト指向プログラミングにおいて核となる重要な概念で、これを理解することでプログラミングの幅が大きく広がります。
近年の開発現場で用いられているようなReactやVueといったJSのフレームワークではこの概念なしに学習することはできません。
また、JSに限らずPHP,Ruby,Pythonなど他のオブジェクト指向プログラミング言語にもある概念ですので、ぜひ理解しておきましょう。
ただし、これまでの項目よりも難易度は少々高いです。プログラミングを用いた本格的な仕事をしたい人は必須ですが、そうでない人は飛ばしても構いません。

## クラスとインスタンスの一般的だけどわかりにくい説明
クラスとはオブジェクトの一種で、ほかのオブジェクトのようにプロパティやメソッドを持ちます。
ほかのオブジェクトと違う仕様が複数ありますが、その最大の特徴はクラスを元にインスタンスを生成できることです。
インスタンスとはクラスから生成されたオブジェクトのことで、クラスのプロパティやメソッドを継承します。

クラスを定義するには`class`キーワードから初め、下記のように`constructor`メソッドやその他のメソッド、プロパティを定義します。

```js
class クラス名 {
  constructor(引数) {
    // インスタンス化されたときに実行される処理
  }
  メソッド名() {
    // メソッドの処理
  }
}
```

クラスからインスタンスを生成するには`new`演算子を使い、関数のようにクラス名の後に`()`をつけて実行します。

```js
new クラス名(引数);
```

クラスは関数のように引数をもたせることもできるので、インスタンス生成時には引数を渡すことで値を変えて様々なインスタンスを生成することができます。

...と、いうのがクラスの一般的な説明ですが、おそらくこの解説は大変わかりづらいかと思いますので、一旦身近なものを題材に言い換えて説明したいと思います。

## クラスとインスタンスのわかりやすい説明
例えばX（旧Twitter）のようなSNSをイメージしてください。
Xのタイムラインにはさまざまなポストがあります。
いずれのポストもユーザー名や投稿日時、本文など共通の情報が含まれていますが、1つとして同じ投稿はありません。

このように共通できる部分を型として持つポストの基本的なテンプレートをクラスと呼び、クラスから生成された固有の値を持つポストをインスタンスと呼びます。

【クラスからインスタンスが作られるイメージ図】

クラスがあることで、SNSのポストのような動的なコンテンツをインスタンスとして効率的に作成することができます。
（もしクラスを使わない場合、共通できる部分があるにも関わらずポスト毎に同じような部分のコードも書かなければならず、とても複雑なコードになるでしょう...。）

## クラスの例
では次は実際のコードを見てみましょう。
上記のようなSNSをのポストを例にクラスとインスタンスのコードを書くと、下記のようになります。
これまでと見慣れない形のため戸惑うかもしれませんが、1つ1つ丁寧に解説していきますので、まずはコードを眺めてみてください！
※下記のコードは実際には不足している部分がありますが、わかりやすさを優先しているため、あえて省略しています。

```js
class Post {
    constructor(obj) {
        this.userName = obj.userName;
        this.content = obj.content;
        this.date = new Date();
    }
    omitContent() {
        return this.content.slice(0, 140) + '...';
    }
    like() { ... }
    repost() { ... }
}

const post = new Post({
    userName: 'ユーザー名',
    content: '本文'
}); //17
```

### クラスの宣言
まず1行目では`Post`という名前でクラスを宣言しています。
クラスは `class クラス名 { ... }` という形式で宣言できます。

### constructorの定義
2~6行目ではコンストラクター`constructor`を定義しています。
これはメソッドの1種ですが、インスタンス生成時に自動的に実行されるという特別な仕様を持ちます。
そのため、14行目でインスタンスが生成されていますが、この時点で`constructor`が実行され、中身の`this.userName`や`this.content`、`this.date`が定義されます。

一方、投稿の本文を140字以下に省略するであろうメソッド`omitContent`や、投稿に「いいね！」をするメソッド`like`,投稿をリポストするメソッド`repost`など、通常のメソッドはどこでも呼ばれていないため、このコードでは実行されません。

### 引数とthis演算子
14行目のインスタンス生成時、引数を渡していることに注目してください。
クラスも関数のように引数を渡し、柔軟なプログラムを作ることができます。
このとき、引数がオブジェクトとして渡されています。オブジェクトを使わずに書くこともできるのですが、オブジェクトを使うことで可読性が上がり、引数の順番を気にする必要がなくなるためおすすめです。（Chapter 5.8参照）


いますが、これは`constructor`の引数に渡され、`this.userName`や`this.content`に代入されます。







## クラスの作り方
先述の例を元にクラスを段階的に作る方法を解説します。
※下記のコードは実際には不足している部分がありますが、わかりやすさを優先しているため、あえて省略しています。

1. クラスを定義する
まずは `class` キーワードを使ってクラスを定義します。
```js
class Post {

}
```

2. コンストラクターを定義する
クラスの中には `constructor` という特別なメソッドを定義することができます。通常のメソッドとは異なり、`constructor`はインスタンス生成時に自動的に実行されます。これを初期化とも呼びます。
試しに下記のように`constructor`を定義し、その中にconsole.logを加えてみます。


```js
class Post {
    constructor() {
        console.log('コンストラクターが実行されました');
    }
}
```

3. メソッドを定義する
続いて普通のメソッドも定義してみます。ここではXのポストのように、コンテンツの文字数が140文字を超えたら省略するメソッドを定義してみます。
クラスにおけるメソッドは`const`や`function`といったキーワードを使わずに、メソッド名と`()`のみを定義します。
なお、「文字を省略する」という命令には`slice()`という標準組み込みメソッドを使います。（Chapter 5.10参照）

```js
class Post {
    constructor() {
        console.log('コンストラクターが実行されました');
    }
    omitContent() {
        const content = "本文のテキストをここに入れる"
        return content.slice(0, 140) + '...';
    }
}
```

このように定義したクラスがもつメソッドはインスタンス生成後に実行できます。
というわけで、このよ

4. 引数オブジェクトの設定
とりあえずメソッド`omitContent`を定義したものの、これでは実行しても常に固定値で`テスト`という文字列が返ってくるだけです。
関数同様クラスには引数を渡すことができるので、引数によってより柔軟な処理ができるようにしてインスタンスを生成してみます。
また`console.log`は不要なので削除しておきます。

```js
class Post {
    constructor(content) {
        this.content = content;
    }
    omitContent() {
        return this.content.slice(0, 140) + '...';
    }
}

new Post("本文のテキストをここに入れる"); //
```


3. インスタンスの作成
まだほとんど何も書いてないに等しい状態ですが、ここまでできたらインスタンスを作成することはできる状態なので、正しく実行できるか、試しにインスタンスを生成してみます。
インスタンスを作成するには`new`演算子というキーワードを使い、関数のようにクラス名の後に`()`をつけて実行します。
試しにコンソール画面を開いてみてください。`コンストラクターが実行されました`という文字が表示されているはずです。

```js
new Post();
```

4. 引数を渡す
関数同様、クラスには引数を



3. メソッドを定義する
続いて普通のメソッドも定義してみます。ここではXのポストのように、コンテンツの文字数が140文字を超えたら省略するメソッドを定義してみます。
クラスにおけるメソッドは`const`や`function`といったキーワードを使わずに、メソッド名と`()`のみを定義します。
なお、「文字を省略する」という命令には`slice()`という標準組み込みメソッドを使います。（CHapter 5.10参照）

```js
class Post {
    constructor() {
        console.log('コンストラクターが実行されました');
    }
    omitContent() {
        return this.content.slice(0, 140) + '...';
    }
}
```


<!-- 
```html
<article class="post js-post">
    <div class="post__header">
        <h2 class="post__header__user-name">ユーザー名</h2>
        <time class="post__header__date">投稿日時</time>
    </div>
    <p class="post__content">本文</p>
</article>
``` -->
```js
class Post {
    constructor(obj) {
        this.userName = obj.userName;
        this.content = obj.content;
        this.date = new Date();
    }
    omitContent() {
        return this.content.slice(0, 140) + '...';
    }
    like() { ... }
    repost() { ... }
}

const post = new Post({
    userName: 'ユーザー名',
    content: '本文'
});
```


クラスとインスタンスを

- テンプレ→ユニーク
- プロパティ、メソッド
- this
- new演算子
- 引数の設定
- constructor
- 継承: コラム